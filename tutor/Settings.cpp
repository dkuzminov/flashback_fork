#include "Settings.h"
#include <QDir>

PersistentSettings& PersistentSettings::Get()
{
    static PersistentSettings instance;
    return instance;
}

PersistentSettings::PersistentSettings()
    : m_settings(QSettings::IniFormat, QSettings::UserScope, "Flashback Tutor")
{
}

QString PersistentSettings::GetDatabasePath()
{
    QString path = m_settings.value("Database", "").toString();
    QFileInfo check(path);
    if (!check.exists() || !check.isFile()) {
        path = QDir(QDir::currentPath()).filePath(HardcodedSettings::GetDefaultLanguage() + ".db");
        m_settings.setValue("Database", path);
    }
    return path;
}


BasicSettings& BasicSettings::Get()
{
    static BasicSettings instance;
    return instance;
}

BasicSettings::BasicSettings()
    : m_isDemoMode(HardcodedSettings::IsDemoMode()),
      m_useMockRepository(HardcodedSettings::UseMockRepository()),
      m_needShowMenu(HardcodedSettings::NeedShowMenu()),
      m_needShowToolbar(HardcodedSettings::NeedShowToolbar()),
      m_needApplyStylesImmediately(HardcodedSettings::NeedApplyStylesImmediately()),
      m_forceAutogenerateDatabase(HardcodedSettings::ForceAutogenerateDatabase()),
      m_colorScheme(HardcodedSettings::GetColorScheme()),
      m_databasePath(HardcodedSettings::GetDatabasePath())
{
    PersistentSettings &persistentSettings = PersistentSettings::Get();
    if (m_databasePath.isEmpty() || !QFile(m_databasePath).exists())
        m_databasePath = persistentSettings.GetDatabasePath();
}
